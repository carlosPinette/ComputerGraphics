import java.applet.Applet;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Game extends Applet implements Runnable, KeyListener {
	
	int arrx[] = {1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35,1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35};
	int arry[] = {-318,-318,-250,-250,-321,-327,-327,-406,-414,-441,-437,-193,-169,-163,-162,-155,-147,-141,-139,-137,-135,-130,-128,-124,-120,-115,-114,-110,-105,-104,-97,-92,-90,-84,-78,-76,-67,-62,-60,-53,-39,-32,26,36,52,54,57,60,64,68,72,76,81,85,88,92,97,100,105,108,111,113,119,123,126,131,135,137,143,147,149,154,158,160,165,172,173,178,185,185,188,194,198,204,208,218,226,221,225,229,237,244,239,241,247,254,260,254,256,261,267,271,266,267,273,277,279,274,275,280,282,283,278,278,284,285,284,278,278,283,282,280,275,274,279,277,273,267,266,271,267,261,256,254,260,254,247,241,239,244,237,229,225,221,226,218,208,204,198,194,188,185,185,178,173,172,165,160,158,154,149,147,143,137,135,131,126,123,119,113,111,108,105,100,97,92,88,85,81,76,72,68,64,60,57,54,52,36,26,-32,-39,-53,-60,-62,-67,-76,-78,-84,-90,-92,-97,-104,-105,-110,-114,-115,-113,-130,-199,-243,-247,-247,-243,-199,-169,-193,-437,-441,-414,-406,-327,-327,-321,-250,-250,-318};
	int arrx2[] = {1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35,1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35};
	int arry2[] = {1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35,1,-35,-35,-44,-44,-38,-32,-32,-37,-37,-59,-180,-200,-201,-207,-213,-219,-218,-224,-226,-226,-226,-231,-234,-236,-234,-239,-241,-239,-244,-247,-246,-250,-252,-251,-255,-258,-256,-260,-263,-231,-257,-257,-231,-266,-266,-265,-262,-264,-263,-260,-261,-260,-259,-256,-257,-255,-251,-252,-251,-249,-246,-247,-245,-240,-241,-239,-234,-235,-232,-228,-228,-225,-220,-221,-216,-211,-211,-207,-202,-199,-198,-194,-188,-191,-182,-171,-167,-163,-167,-156,-145,-141,-137,-139,-128,-116,-113,-109,-111,-99,-86,-84,-79,-80,-67,-55,-53,-48,-49,-35,-23,-22,-16,-16,-3,16,16,22,23,35,49,48,53,55,67,80,79,84,86,99,111,109,113,116,128,139,137,141,145,156,167,163,167,171,182,191,188,194,198,199,202,207,211,211,216,221,220,225,228,228,232,235,234,239,241,240,245,247,246,249,251,252,251,255,257,256,259,260,261,260,263,264,262,265,266,266,231,257,257,231,263,260,256,258,255,251,252,250,246,247,244,239,241,239,234,234,269,269,255,255,214,214,200,200,180,59,37,37,32,32,38,44,44,35,35};
	double tamano = 0.6;
	double grados = 0;
	double a=0,b=0,c=10;
	// Testing
	Laser laserArray[] = new Laser[20];
	int arrayIndex;
        int loopIndex;
	// How many pixels the square moves per unit of movement.
	private static final int SPEED = 5;

	// flags that are set when keypressed/keyreleased events occur.
	boolean up, down, left, right, laser;

	// vX & vY are the speed of the x and y direction of the square. x and y are
	// the position of the square.
	public int vX, vY, midx, midy;

	// Declare a thread.
	Thread t, t2;
	Laser L;

	// Do one time:
	public void init() {

		setSize(1500, 800);
		arrayIndex = 0;
                loopIndex = 0;
        midx = getSize().width/2;
        midy = getSize().height/2;
		// Initialize and start thread.
		t = new Thread(this);
		t.start();

		// add the key listener
		addKeyListener(this);
	}

	public void run() {

		while (true) {
			try {
				Thread.sleep(20);
				repaint();
			} catch (Exception e) {
				System.out.println("fail");
			}
		}

	}

	public void go() {
		midx += vX;
		midy += vY;

	}

	private void update() {
		vX = 0;
		vY = 0;
	}

	@Override
	public void keyPressed(KeyEvent ke) {

		switch (ke.getKeyCode()) {

		case KeyEvent.VK_DOWN:
			double grados4 = Math.toRadians(grados);
			b= Math.cos(grados4)*c;
			
			a = Math.sin(grados4)*c;
			midy += b;
			midx -= a;
			break;
		case KeyEvent.VK_UP:
			double grados3 = Math.toRadians(grados);
			b= Math.cos(grados3)*c;
			
			a = Math.sin(grados3)*c;
			midy -= b;
			midx += a;
			
			break;
		case KeyEvent.VK_LEFT:
			grados-= 10;
			break;
		case KeyEvent.VK_RIGHT:
			grados +=10;
			break;
		case KeyEvent.VK_MINUS:
			tamano -= 0.1;
			if(tamano < 0.1){
				tamano = 0.1;
			}
			
			break;
		case KeyEvent.VK_PLUS:
			tamano += 0.1;
			if(tamano > 2){
				tamano = 2;
			}
			break;

		}
		update();
	}

	@Override
	public void keyReleased(KeyEvent ke) {

		switch (ke.getKeyCode()) {

		case KeyEvent.VK_DOWN:
			down = false;
			break;
		case KeyEvent.VK_UP:
			up = false;
			break;
		case KeyEvent.VK_LEFT:
			left = false;
			break;
		case KeyEvent.VK_RIGHT:
			right = false;
			break;
		case KeyEvent.VK_SPACE:
			laser = true;
			int aux3 = (int)((arrx2[1]-arrx2[2])/2);
			laserArray[arrayIndex] = new Laser(this, arrx2[1]+aux3, arry2[1], laser, true, grados);
			t2 = new Thread(laserArray[arrayIndex]);
			t2.start();
			arrayIndex++;
            loopIndex = Math.min(19, ++loopIndex);

			if (arrayIndex >=19) {
				arrayIndex = 0;
			}

			break;
		}
		update();
	}

	@Override
	public void keyTyped(KeyEvent arg0) {

	}

	public void paint(Graphics g) {

		go();
		 double grados2;
         grados2 = Math.toRadians(grados);
         
		  for(int i=0; i<226;i++){
         	 arrx2[i] = (int)((((arrx[i])* tamano)*Math.cos(grados2))-((arry[i]*tamano)*Math.sin(grados2)));
         	 arry2[i] = (int)((((arrx[i])* tamano)*Math.sin(grados2))+((arry[i]*tamano)*Math.cos(grados2)));
     } 
      
      
      
      for(int i=0; i<226;i++){
     	 arrx2[i] += midx; 
     	 arry2[i] += midy;
      }
      g.setColor(new Color(122,122,122));
      
      g.fillPolygon(arrx2,arry2,226);
      
		if (laser) {

			for (int i = 0; i < loopIndex; i++) {
				if (laserArray[i].alive) {
					g.setColor(Color.red);
					g.drawLine(laserArray[i].x+5, laserArray[i].y - 5,
							laserArray[i].x+5, laserArray[i].y + 10);
					double aux3 = 60*tamano;
					int aux2 = (int) (aux3);
					g.drawLine((laserArray[i].x+aux2), laserArray[i].y - 5,
							(laserArray[i].x+aux2), laserArray[i].y + 10);
				}
			}

		}
	}
}